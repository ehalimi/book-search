{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutation.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","i","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","content","log","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","userData","me","update","cache","readQuery","query","modify","identify","fields","savedBooks","DELETE","warn","deleteBook","handleDeleteBook","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a26c6e9e.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from '@apollo/client'\n\nexport const LOGIN_USER = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }`\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $email: String!, $password: String!) {\n        addUser(username: $username, email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }`\n\nexport const SAVE_BOOK = gql`\n    mutation saveBook($content: newBook!) {\n        saveBook(content: $content) {\n            _id\n            username\n            email\n            bookCount\n            savedBooks {\n                bookId\n                title\n            }\n        }\n    }`\n    \nexport const REMOVE_BOOK = gql`\n    mutation RemoveBook($bookId: String!) {\n        removeBook(bookId: $bookId) {\n            username\n            bookCount\n            savedBooks {\n                bookId\n            }\n        }\n    }`","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { SAVE_BOOK } from '../utils/mutation';\nimport { useMutation } from '@apollo/client';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook] = useMutation(SAVE_BOOK)\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: {content: bookToSave}\n      })\n      console.log(\"book to save\", bookToSave)\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\n    {\n        me {\n            _id\n            email\n            username\n            bookCount\n            savedBooks {\n                bookId\n                description\n                authors\n                title\n                image\n                link\n            }\n        }\n    }\n`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\n\nimport Auth from '../utils/auth';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutation';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n\n  const { loading, data} = useQuery(GET_ME)\n  const userData = data?.me || {}\n  \n  const [deleteBook] = useMutation(REMOVE_BOOK, {\n    update(cache) {\n      try {\n        const { me } = cache.readQuery({ query: GET_ME})\n        cache.modify({\n          id: cache.identify(me),\n          fields: {\n            savedBooks({DELETE}) {\n              return DELETE;\n            }\n          }\n        })\n    } catch (e) {\n      console.warn(\"Something went wrong with cache update\")\n    }\n}})\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteBook({\n        variables: {bookId: bookId}\n      })\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { ADD_USER } from '../utils/mutation';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await addUser({\n        variables: {...userFormData}\n      })\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutation';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await login({\n        variables: {...userFormData}\n      })\n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n})\nconst authLink = setContext((_, {headers}) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    }\n  }\n})\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}